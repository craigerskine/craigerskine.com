---
layout: false
tags: ux
title: Metroid Passwords
desc: Generate custom NES Metroid password using a simple interface...
tech:
  - title: HTML
    ico: fa6-brands:html5
  - title: CSS
    ico: fa6-brands:css3-alt
  - title: Twind
    ico: mdi:tailwind
  - title: Alpine.js
    ico: simple-icons:alpinedotjs
ico: mdi:virus
color: orange
date: 0017-01-01
---
<!DOCTYPE html>
<html lang="en" class="bg-transparent" data-theme="dark">
  <head>
    <meta charset="UTF-8" />
    <title>Metroid Password Generator</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link href="https://cdn.jsdelivr.net/npm/daisyui@5" rel="stylesheet" type="text/css" />
    <script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>
    <link href="https://fonts.cdnfonts.com/css/narpassword00000" rel="stylesheet" />
    <style type="text/tailwindcss">
      :root {
        --color-primary: var(--color-warning);
        --color-primary-content: var(--color-warning-content);
        --radius-selector: 0;
        --radius-field: 0;
        --radius-box: 0;
        --depth: 0;
        --noise: 0;
      }
      @theme {
        --font-mono: 'NARPASSWORD00000 fixed.width', ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
      }
      @layer base {
        h2 { @apply text-(--color-warning) mb-6 pb-2 border-b border-current/30; }
        img { @apply transition; }
        label { @apply relative transition; }
        input[type=checkbox] { @apply cursor-pointer appearance-none border-0 absolute inset-0 z-10 focus-visible:outline-offset-1 focus-visible:outline-2 focus-visible:outline-(--color-primary); }
      }
    </style>
  </head>
  <body class="bg-black font-mono uppercase !block" style="display: none;" x-data="metroidPasswordApp()" x-init="updatePassword()">

    <div class="pb-4 px-12 min-h-screen flex flex-col relative before:fixed before:left-0 before:inset-y-0 before:w-8 before:[background-image:url(/_assets/img/ux/metroid/wall.png)] after:fixed after:right-0 after:inset-y-0 after:w-8 after:[transform:scaleX(-1)] after:[background-image:url(/_assets/img/ux/metroid/wall.png)]">

      <header class="pt-12 mb-12 w-full shrink-0">
        <hgroup class="flex flex-col items-center gap-2">
          <p><img src="/_assets/img/ux/metroid/title.png" alt="Metroid" class="motion-safe:animate-pulse" /></p>
          <h1 class="text-success font-black">Password Generator</h1>
        </hgroup>
      </header>

      <main class="w-full space-y-12 grow">

        <!-- password -->
        <header class="text-info text-xl flex justify-center normal-case sm:text-2xl md:text-4xl">
          <!--
            <span class="p-4 pt-6 bg-neutral-800 inline-grid grid-cols-2 justify-center gap-4">
              <template x-for="(line, lineIndex) in password" :key="lineIndex" hidden>
                <span><template x-for="(char, charIndex) in line.split('')" :key="charIndex" hidden><span x-text="char"></span></template></span>
              </template>
            </span>
          -->
            <textarea
              class="appearance-none border-0 w-fit text-center resize-none selection:bg-sky-300 selection:text-sky-900 focus-visible:outline-none"
              readonly
              :value="maskedPassword"
              @click="$event.target.select()"></textarea>
        </header>

        <div class="container mx-auto grid grid-cols-1 gap-8 md:grid-cols-3">

          <div class="flex flex-col gap-8">
            <!-- start in -->
            <section>
              <h2>Start In</h2>
              <div class="text-sm flex flex-col gap-1">
                <label class="label text-white opacity-50 [&:has(:checked)]:opacity-100"><input type="radio" class="hidden" name="start" value="brinstar" x-model="startLocation" @change="updatePassword()" />Brinstar</label>
                <label class="label text-white opacity-50 [&:has(:checked)]:opacity-100"><input type="radio" class="hidden" name="start" value="norfair" x-model="startLocation" @change="updatePassword()" />Norfair</label>
                <label class="label text-white opacity-50 [&:has(:checked)]:opacity-100"><input type="radio" class="hidden" name="start" value="kraidsLair" x-model="startLocation" @change="updatePassword()" />Kraid's Lair</label>
                <label class="label text-white opacity-50 [&:has(:checked)]:opacity-100"><input type="radio" class="hidden" name="start" value="ridleysLair" x-model="startLocation" @change="updatePassword()" />Ridley's Lair</label>
                <label class="label text-white opacity-50 [&:has(:checked)]:opacity-100"><input type="radio" class="hidden" name="start" value="tourian" x-model="startLocation" @change="updatePassword()" />Tourian</label>
              </div>
            </section>

            <!-- suit -->
            <section>
              <h2>Suit</h2>
              <label>
                <input type="checkbox" x-model="options.swimsuit" @change="updatePassword()" title="Suit" />
                <img src="/_assets/img/ux/metroid/samus.png" alt="Suit" :class="options.swimsuit ? 'object-right' : 'object-left'" class="w-8 h-16 object-cover" />
              </label>
            </section>
          </div>

          <div class="flex flex-col gap-8">
            <!-- power-ups -->
            <section>
              <h2>Power-Ups</h2>
              <div class="flex">
                <div class="flex flex-wrap gap-4">
                  <label>
                    <input type="checkbox" x-model="options.morphBall" @change="updatePassword()" title="Morph Ball" />
                    <img src="/_assets/img/ux/metroid/morph-ball.png" alt="Morph Ball" :class="options.morphBall || 'opacity-50'" class="w-8" />
                  </label>
                  <label>
                    <input type="checkbox" x-model="options.bombs" @change="updatePassword()"  title="Bombs" />
                    <img src="/_assets/img/ux/metroid/bombs.png" alt="Bombs" :class="options.bombs || 'opacity-50'" class="w-8" />
                  </label>
                  <label>
                    <input type="checkbox" x-model="options.highJump" @change="updatePassword()" title="High Jump" />
                    <img src="/_assets/img/ux/metroid/high-jump.png" alt="Hi-Jump" :class="options.highJump || 'opacity-50'" class="w-8" />
                  </label>
                  <label>
                    <input type="checkbox" x-model="options.variaSuit" @change="updatePassword()" title="Varia Suit" />
                    <img src="/_assets/img/ux/metroid/varia-suit.png" alt="Varia Suit" :class="options.variaSuit || 'opacity-50'" class="w-8" />
                  </label>
                  <label>
                    <input type="checkbox" x-model="options.screwAttack" @change="updatePassword()" title="Screw Attack" />
                    <img src="/_assets/img/ux/metroid/screw-attack.png" alt="Screw Attack" :class="options.screwAttack || 'opacity-50'" class="w-8" />
                  </label>
                </div>
              </div>
            </section>

            <!-- loadout -->
            <section>
              <h2>Loadout</h2>
              <div class="flex">
                <div class="flex flex-wrap gap-4">
                  <label>
                    <input type="checkbox" x-model="options.longBeam" @change="updatePassword()" title="Long Beam" />
                    <img src="/_assets/img/ux/metroid/long-beam.png" alt="Long Beam" :class="options.longBeam || 'opacity-50'" class="w-8" />
                  </label>
                  <label>
                    <input type="checkbox" x-model="options.iceBeam" @change="updatePassword()" title="Ice Beam" />
                    <img src="/_assets/img/ux/metroid/ice-beam.png" alt="Ice Beam" :class="options.iceBeam || 'opacity-50'" class="w-8" />
                  </label>
                  <label>
                    <input type="checkbox" x-model="options.waveBeam" @change="updatePassword()" title="Wave Beam" />
                    <img src="/_assets/img/ux/metroid/wave-beam.png" alt="Wave Beam" :class="options.waveBeam || 'opacity-50'" class="w-8" />
                  </label>
                  <label>
                    <input type="checkbox" x-model="options.missiles" @change="updatePassword()" title="All Missiles" />
                    <img src="/_assets/img/ux/metroid/missile.png" alt="Missiles" :class="options.missiles || 'opacity-50'" class="w-8" />
                  </label>
                  <label>
                    <input type="checkbox" x-model="options.energyTanks" @change="updatePassword()" title="All Energy Tanks" />
                    <img src="/_assets/img/ux/metroid/etank.png" alt="Energy Tanks" :class="options.energyTanks || 'opacity-50'" class="w-8" />
                  </label>
                </div>
              </div>
            </section>
          </div>

          <!-- bosses -->
          <section>
            <h2>Bosses</h2>
            <div class="flex flex-wrap items-end gap-4">
              <label>
                <input type="checkbox" x-model="bosses.kraid" @change="updatePassword()" title="Kraid" />
                <img src="/_assets/img/ux/metroid/kraid.png" alt="Kraid" :class="bosses.kraid && 'opacity-50'" class="h-16" />
              </label>
              <label>
                <input type="checkbox" x-model="bosses.ridley" @change="updatePassword()" title="Ridley" />
                <img src="/_assets/img/ux/metroid/ridley.png" alt="Ridley" :class="bosses.ridley && 'opacity-50'" class="h-16" />
              </label>
              <div class="flex gap-1.5">
                <template x-for="(z, i) in zebetites" :key="i" hidden>
                  <label class="flex flex-col items-center">
                    <input type="checkbox" :checked="z" @change="zebetites[i] = !zebetites[i]; updatePassword()" />
                    <img src="/_assets/img/ux/metroid/zebetite-base.png" alt="Zebetite base" class="w-4" />
                    <img src="/_assets/img/ux/metroid/zebetite.png" :alt="'Zebetite '+ (i + 1)" class="h-8 transition-all" :class="zebetites[i] ? 'w-0' : 'w-full'" />
                    <img src="/_assets/img/ux/metroid/zebetite-base.png" alt="Zebetite base" class="w-4 [transform:scaleY(-1)]" />
                  </label>
                </template>
              </div>
              <label>
                <input type="checkbox" x-model="bosses.brain" @change="updatePassword()" title="Mother Brain" />
                <img src="/_assets/img/ux/metroid/motherbrain.png" alt="Mother Brain" :class="bosses.brain && 'opacity-50'" class="h-24" />
              </label>
            </div>
          </section>
        </div>

      </main>

      <footer class="mt-auto pt-4 border-t border-dashed border-neutral-500/50 w-full text-neutral-500 text-xs text-center shrink-0">By <a href="https://craigerskine.com" class="transition hover:text-white hover:underline">Craig Erskine</a></footer>
    </div>


    <script type="module">
      const METROID_ALPHABET = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz?-";

      function makeBuffer() {
        return new Uint8Array(18);
      }

      function setBit(buffer, bitIndex, value) {
        const byte = Math.floor(bitIndex / 8);
        const bit = bitIndex % 8;
        if (value) {
          buffer[byte] |= (1 << bit);
        } else {
          buffer[byte] &= ~(1 << bit);
        }
      }

      function rotateRight(buffer) {
        const shift = buffer[16] & 0x07;
        for (let r = 0; r < shift; r++) {
          let carry = 1;
          for (let i = 0; i < 16; i++) {
            const newCarry = buffer[i] & 0x01;
            buffer[i] = (buffer[i] >>> 1) | ((carry & 0x01) << 7);
            carry = newCarry;
          }
        }
      }

      function fixChecksum(buffer) {
        let checksum = 0;
        for (let i = 0; i < 17; i++) {
          checksum = (checksum + buffer[i]) % 256;
        }
        buffer[17] = checksum;
      }

      function bufferToPassword(buffer) {
        const chars = [];
        for (let i = 0; i < 6; i++) {
          const j = i * 3;
          const b0 = buffer[j], b1 = buffer[j + 1], b2 = buffer[j + 2];
          chars.push(b0 >> 2);
          chars.push(((b0 & 0x03) << 4) | (b1 >> 4));
          chars.push(((b1 & 0x0F) << 2) | (b2 >> 6));
          chars.push(b2 & 0x3F);
        }
        return chars.map(i => METROID_ALPHABET[i]).join('');
      }

      function metroidPasswordApp() {
        return {
          password: [],
          startLocation: 'brinstar',
          options: {
            morphBall: false,
            bombs: false,
            highJump: false,
            variaSuit: false,
            screwAttack: false,
            longBeam: false,
            iceBeam: false,
            waveBeam: false,
            missiles: false,
            energyTanks: false,
            swimsuit: false,
          },
          bosses: {
            ridley: false,
            kraid: false,
            brain: false,
          },
          zebetites: [false, false, false, false, false],

          updatePassword() {
            // buffer
            const buffer = new Uint8Array(18);
            const setStartBits = (b0, b1, b2) => {
              setBit(buffer, 64, b0);
              setBit(buffer, 65, b1);
              setBit(buffer, 66, b2);
            }

            // starting location
            switch (this.startLocation) {
              case "norfair":     setStartBits(1, 0, 0); break;
              case "kraidsLair":  setStartBits(0, 1, 0); break;
              case "ridleysLair": setStartBits(0, 0, 1); break;
              case "tourian":     setStartBits(1, 1, 0); break;
              default:            setStartBits(0, 0, 0); break; // brinstar
            }

            // items
            if (this.options.morphBall) {
              setBit(buffer, 76, 1);
              setBit(buffer, 0, 0);
              setBit(buffer, 5, 1);
            }

            if (this.options.bombs) {
              setBit(buffer, 72, 1);
              setBit(buffer, 6, 1);
            }

            if (this.options.highJump) {
              setBit(buffer, 73, 1);
              setBit(buffer, 24, 1);
            }

            if (this.options.variaSuit) {
              setBit(buffer, 77, 1);
              setBit(buffer, 11, 1);
            }

            if (this.options.screwAttack) {
              setBit(buffer, 75, 1);
              setBit(buffer, 26, 1);
            }

            if (this.options.longBeam) setBit(buffer, 74, 1);
            if (this.options.iceBeam)  setBit(buffer, 79, 1);
            if (this.options.waveBeam) setBit(buffer, 78, 1);

            // missiles
            if (this.options.missiles) {
              buffer[10] = 255;
                const missileContainerBits = [
                  1, 8,
                  13, 14, 16, 17, 18, 19, 20, 21, 22, 27, 28, 31,
                  33, 34, 39, 40,
                  43, 46, 49
                ];
                missileContainerBits.forEach(bit => setBit(buffer, bit, 1));
            }

            // energy tanks
            if (this.options.energyTanks) {
              [4, 9, 12, 30, 36, 42, 45, 48].forEach(bit => setBit(buffer, bit, 1));
            }

            // bosses
            if (this.bosses.kraid) {
              setBit(buffer, 126, 1);
              setBit(buffer, 127, 1);
            }
            if (this.bosses.ridley) {
              setBit(buffer, 124, 1);
              setBit(buffer, 125, 1);
            }
            setBit(buffer, 58, this.bosses.brain);

            // zebetites
            this.zebetites.forEach((active, index) => {
              setBit(buffer, 53 + index, active ? 1 : 0);
            });

            if (this.options.swimsuit) setBit(buffer, 71, 1);

            // password
            buffer[16] = 0;
            rotateRight(buffer);
            fixChecksum(buffer);
            const chars = bufferToPassword(buffer);
            this.password = chars.split('');
            //this.password = [chars.slice(0,6), chars.slice(6,12), chars.slice(12,18), chars.slice(18)];
          },
          get maskedPassword() {
            const p = this.password.join('');
            return p.length === 24
              ? `${p.slice(0,6)} ${p.slice(6,12)}\n${p.slice(12,18)} ${p.slice(18,24)}`
              : '';
          },
        };
      }

      import Alpine from 'https://esm.run/alpinejs';
      import mask from 'https://esm.run/@alpinejs/mask';
      import tippy from 'https://esm.run/tippy.js';
      import 'https://esm.run/tippy.js/dist/tippy.css';
      document.addEventListener('alpine:init', () => {
        // tooltip
        // magic: $tooltip
        Alpine.magic('tooltip', el => message => {
          let instance = tippy(el, { content: message, trigger: 'manual' })
          instance.show()
          setTimeout(() => {
            instance.hide()
            setTimeout(() => instance.destroy(), 150)
          }, 2000)
        });
        // directive: x-tooltip
        Alpine.directive('tooltip', (el, { expression }, { evaluate }) => {
          tippy(el, { content: evaluate(expression) })
        });
      });
      window.Alpine = Alpine;
      Alpine.plugin([mask]);
      window.metroidPasswordApp = metroidPasswordApp;
      Alpine.start();
    </script>

  </body>
</html>

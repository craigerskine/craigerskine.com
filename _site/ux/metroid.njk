---
layout: false
tags: ux
title: Metroid Passwords
desc: Generate custom NES Metroid password using a simple interface...
tech:
  - title: HTML
    ico: fa6-brands:html5
  - title: CSS
    ico: fa6-brands:css3-alt
  - title: Twind
    ico: mdi:tailwind
  - title: Alpine.js
    ico: simple-icons:alpinedotjs
ico: mdi:virus
color: orange
date: 0017-01-01
---
<!DOCTYPE html>
<html lang="en" class="bg-transparent" data-theme="dark">
  <head>
    <meta charset="UTF-8" />
    <title>Metroid Password Generator</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link href="https://cdn.jsdelivr.net/npm/daisyui@5" rel="stylesheet" type="text/css" />
    <script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>
    <link href="https://fonts.cdnfonts.com/css/narpassword00000" rel="stylesheet" />
    <style type="text/tailwindcss">
      :root {
        --color-primary: var(--color-warning);
        --color-primary-content: var(--color-warning-content);
        --radius-selector: 0;
        --radius-field: 0;
        --radius-box: 0;
        --depth: 0;
        --noise: 0;
      }

      @theme {
        /* font */
        --font-mono: 'NARPASSWORD00000 fixed.width', ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;

        /* animate */
        --animate-climb: climb 6s linear infinite;
        @keyframes climb {
          from { background-position: 0 0; }
          to { background-position: 0 78px; }
        }
      }

      @layer base {
        [x-cloak] { display: none; }
        h2 { @apply mb-6 pb-2 border-b border-current/30 text-(--color-warning) text-xs; }
        img { @apply transition; }
        label { @apply relative transition; }
        input[type=checkbox] { @apply cursor-pointer appearance-none border-0 absolute inset-0 z-10 rounded-sm focus-visible:outline focus-visible:outline-2 focus-visible:outline-current; }
        .tippy-content { @apply text-xs; }
      }

      .btn-text { @apply p-0 border-0 h-auto text-gray-500 uppercase no-underline underline-offset-4 rounded-sm checked:text-white checked:underline hover:underline; }
    </style>
  </head>
  <body class="bg-black font-mono uppercase !block" style="display: none;" x-data="app" x-init="updatePassword()">

    <div class="pb-4 px-12 min-h-screen flex flex-col relative before:fixed before:left-0 before:inset-y-0 before:w-8 before:[background-image:url(/_assets/img/ux/metroid/wall.png)] motion-safe:before:animate-climb after:fixed after:right-0 after:inset-y-0 after:w-8 after:[transform:scaleX(-1)] after:[background-image:url(/_assets/img/ux/metroid/wall.png)] motion-safe:after:animate-climb" x-cloak>

      <header class="pt-12 mb-12 w-full shrink-0">
        <hgroup class="flex flex-col items-center gap-2">
          <p><img src="/_assets/img/ux/metroid/title.png" alt="Metroid" class="motion-safe:animate-pulse" /></p>
          <h1 class="text-success font-black">Password Generator</h1>
        </hgroup>
      </header>

      <main class="pb-12 w-full space-y-12 grow">

        <!-- password -->
        <header class="text-info text-xl flex justify-center normal-case sm:text-2xl md:text-4xl">
          <div class="pt-4 pb-2 border-1 border-current/30 w-[260px] text-center grid grid-cols-2 items-center justify-center gap-2 select-none relative selection:bg-sky-300 selection:text-sky-900 sm:w-[300px] md:w-[440px]">
            <span x-text="maskedPassword[0]"></span>
            <span x-text="maskedPassword[1]"></span>
            <span x-text="maskedPassword[2]"></span>
            <span x-text="maskedPassword[3]"></span>
            <button class="appearance-none border border-current/30 w-9 h-9 bg-black text-2xl flex items-center justify-center absolute top-0 right-0 cursor-pointer -translate-y-1/2 translate-x-1/2 transition hover:border-success hover:bg-success hover:text-black" @click="copyPassword"><iconify-icon icon="pixelarticons:clipboard" class="iconify" noobserver></iconify-icon></button>
          </div>
        </header>

        <div class="container mx-auto flex flex-wrap justify-center gap-8">

          <!-- start in -->
          <section>
            <h2>Start In</h2>
            <div class="text-sm flex flex-col items-start gap-2.5">
              <label><input type="radio" class="btn btn-link btn-sm btn-text" name="start" value="brinstar" x-model="startLocation" @change="updatePassword()" aria-label="Brinstar" /></label>
              <label><input type="radio" class="btn btn-link btn-sm btn-text" name="start" value="norfair" x-model="startLocation" @change="updatePassword()" aria-label="Norfair" /></label>
              <label><input type="radio" class="btn btn-link btn-sm btn-text" name="start" value="kraidsLair" x-model="startLocation" @change="updatePassword()" aria-label="Kraid's Lair" /></label>
              <label><input type="radio" class="btn btn-link btn-sm btn-text" name="start" value="ridleysLair" x-model="startLocation" @change="updatePassword()" aria-label="Ridley's Lair" /></label>
              <label><input type="radio" class="btn btn-link btn-sm btn-text" name="start" value="tourian" x-model="startLocation" @change="updatePassword()" aria-label="Tourian" /></label>
            </div>
          </section>

          <!-- suit -->
          <section class="lg:shrink-0">
            <h2>Suit</h2>
            <div class="flex flex-wrap justify-center gap-4">
              <label>
                <input type="checkbox" x-model="options.swimsuit" @change="updatePassword()" title="Suit" />
                <img src="/_assets/img/ux/metroid/samus.png" alt="Suit" :class="options.swimsuit ? 'object-right' : 'object-left'" class="w-8 h-16 object-cover" />
              </label>
            </div>
          </section>

          <!-- power-ups -->
          <section>
            <h2>Power-Ups</h2>
            <div class="flex flex-wrap gap-4">
              <label>
                <input type="checkbox" x-model="options.morphBall" @change="updatePassword()" title="Morph Ball" />
                <img src="/_assets/img/ux/metroid/power-morph-ball.png" alt="Morph Ball" :class="options.morphBall || 'opacity-70 grayscale'" class="w-8" />
              </label>
              <label>
                <input type="checkbox" x-model="options.bombs" @change="updatePassword()"  title="Bombs" />
                <img src="/_assets/img/ux/metroid/power-bombs.png" alt="Bombs" :class="options.bombs || 'opacity-70 grayscale'" class="w-8" />
              </label>
              <label>
                <input type="checkbox" x-model="options.highJump" @change="updatePassword()" title="High Jump" />
                <img src="/_assets/img/ux/metroid/power-high-jump.png" alt="Hi-Jump" :class="options.highJump || 'opacity-70 grayscale'" class="w-8" />
              </label>
              <label>
                <input type="checkbox" x-model="options.variaSuit" @change="updatePassword()" title="Varia Suit" />
                <img src="/_assets/img/ux/metroid/power-varia-suit.png" alt="Varia Suit" :class="options.variaSuit || 'opacity-70 grayscale'" class="w-8" />
              </label>
              <label>
                <input type="checkbox" x-model="options.screwAttack" @change="updatePassword()" title="Screw Attack" />
                <img src="/_assets/img/ux/metroid/power-screw-attack.png" alt="Screw Attack" :class="options.screwAttack || 'opacity-70 grayscale'" class="w-8" />
              </label>
            </div>
          </section>

          <!-- loadout -->
          <section>
            <h2>Loadout</h2>
            <div class="flex flex-wrap gap-4">
              <label>
                <input type="checkbox" x-model="options.longBeam" @change="updatePassword()" title="Long Beam" />
                <img src="/_assets/img/ux/metroid/loadout-long-beam.png" alt="Long Beam" :class="options.longBeam || 'opacity-70 grayscale'" class="w-8" />
              </label>
              <label>
                <input type="checkbox" x-model="options.iceBeam" @change="updatePassword()" title="Ice Beam" />
                <img src="/_assets/img/ux/metroid/loadout-ice-beam.png" alt="Ice Beam" :class="options.iceBeam || 'opacity-70 grayscale'" class="w-8" />
              </label>
              <label>
                <input type="checkbox" x-model="options.waveBeam" @change="updatePassword()" title="Wave Beam" />
                <img src="/_assets/img/ux/metroid/loadout-wave-beam.png" alt="Wave Beam" :class="options.waveBeam || 'opacity-70 grayscale'" class="w-8" />
              </label>
              <label>
                <input type="checkbox" x-model="options.missiles" @change="updatePassword()" title="All Missiles" />
                <img src="/_assets/img/ux/metroid/loadout-missile.png" alt="Missiles" :class="options.missiles || 'opacity-70 grayscale'" class="w-8" />
              </label>
              <label>
                <input type="checkbox" x-model="options.energyTanks" @change="updatePassword()" title="All Energy Tanks" />
                <img src="/_assets/img/ux/metroid/loadout-etank.png" alt="Energy Tanks" :class="options.energyTanks || 'opacity-70 grayscale'" class="w-8" />
              </label>
            </div>
          </section>

          <!-- bosses -->
          <section>
            <h2>Bosses</h2>
            <div class="flex flex-col gap-4">
              <div class="flex items-end gap-4">
                <label>
                  <input type="checkbox" x-model="bosses.kraid" @change="updatePassword()" title="Kraid" />
                  <img src="/_assets/img/ux/metroid/boss-kraid.png" alt="Kraid" :class="bosses.kraid && 'opacity-70 grayscale'" class="h-16" />
                </label>
                <label>
                  <input type="checkbox" x-model="bosses.ridley" @change="updatePassword()" title="Ridley" />
                  <img src="/_assets/img/ux/metroid/boss-ridley.png" alt="Ridley" :class="bosses.ridley && 'opacity-70 grayscale'" class="h-16" />
                </label>
                <label class="ml-auto flex flex-col items-center">
                  <input type="checkbox" x-model="statues.kraid" @change="updatePassword()" title="Kraid Statue" />
                  <img src="/_assets/img/ux/metroid/statue-kraid.png" alt="Kraid" :class="statues.kraid ? '' : 'opacity-70 grayscale'" class="h-6" />
                  <img src="/_assets/img/ux/metroid/statue-ext.png" alt="Kraid" :class="statues.kraid ? 'h-4' : 'h-0'" class="w-2.5 transition-all" />
                  <img src="/_assets/img/ux/metroid/statue-base.png" alt="Kraid" :class="statues.kraid ? '' : 'opacity-70 grayscale'" class="h-4" />
                </label>
                <label class="flex flex-col items-center">
                  <input type="checkbox" x-model="statues.ridley" @change="updatePassword()" title="Ridley Statue" />
                  <img src="/_assets/img/ux/metroid/statue-ridley.png" alt="Ridley" :class="statues.ridley ? '' : 'opacity-70 grayscale'" class="w-4" />
                  <img src="/_assets/img/ux/metroid/statue-ext.png" alt="Ridley" :class="statues.ridley ? 'h-4' : 'h-0'" class="w-2.5 transition-all" />
                  <img src="/_assets/img/ux/metroid/statue-base.png" alt="Ridley" :class="statues.ridley ? '' : 'opacity-70 grayscale'" class="h-4" />
                </label>
              </div>
              <div class="flex items-center gap-4">
                <label>
                  <input type="checkbox" x-model="bosses.brain" @change="updatePassword()" title="Mother Brain" />
                  <img src="/_assets/img/ux/metroid/boss-motherbrain.png" alt="Mother Brain" class="h-24" x-show="!bosses.brain" />
                  <img src="/_assets/img/ux/metroid/boss-motherbrain-x.png" alt="Mother Brain" class="h-24 block opacity-70 grayscale" x-show="bosses.brain" />
                </label>
                <div class="flex flex-row-reverse gap-1.5">
                  <template x-for="(z, i) in zebetites" :key="i" hidden>
                    <label class="flex flex-col items-center">
                      <input type="checkbox" x-tooltip="'Zebetite '+ (i + 1)" :checked="z" @change="zebetites[i] = !zebetites[i]; updatePassword()" />
                      <img src="/_assets/img/ux/metroid/zebetite-base.png" alt="Zebetite base" class="w-4" />
                      <img src="/_assets/img/ux/metroid/zebetite.png" :alt="'Zebetite '+ (i + 1)" class="h-8 transition-all" :class="zebetites[i] ? 'w-0' : 'w-full'" />
                      <img src="/_assets/img/ux/metroid/zebetite-base.png" alt="Zebetite base" class="w-4 [transform:scaleY(-1)]" />
                    </label>
                  </template>
                </div>
              </div>
            </div>
          </section>
        </div>

      </main>

      <footer class="mt-auto pt-4 border-t border-dashed border-neutral-500/50 w-full text-neutral-500 text-xs text-center shrink-0">By <a href="https://craigerskine.com" class="transition hover:text-white hover:underline">Craig Erskine</a></footer>
    </div>

    <div x-show="toastCopy" x-transition class="toast toast-top toast-end" style="display: none;" x-cloak>
      <div class="alert alert-success pb-2 rounded-lg"><span>Password copied to clipboard!</span></div>
    </div>


    <script type="module">
      // icons
      import 'https://esm.run/iconify-icon';

      const METROID_ALPHABET = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz?-";

      function makeBuffer() {
        return new Uint8Array(18);
      }

      function setBit(buffer, bitIndex, value) {
        const byte = Math.floor(bitIndex / 8);
        const bit = bitIndex % 8;
        if (value) {
          buffer[byte] |= (1 << bit);
        } else {
          buffer[byte] &= ~(1 << bit);
        }
      }

      function rotateRight(buffer) {
        const shift = buffer[16] & 0x07;
        for (let r = 0; r < shift; r++) {
          let carry = 1;
          for (let i = 0; i < 16; i++) {
            const newCarry = buffer[i] & 0x01;
            buffer[i] = (buffer[i] >>> 1) | ((carry & 0x01) << 7);
            carry = newCarry;
          }
        }
      }

      function fixChecksum(buffer) {
        let checksum = 0;
        for (let i = 0; i < 17; i++) {
          checksum = (checksum + buffer[i]) % 256;
        }
        buffer[17] = checksum;
      }

      function bufferToPassword(buffer) {
        const chars = [];
        for (let i = 0; i < 6; i++) {
          const j = i * 3;
          const b0 = buffer[j], b1 = buffer[j + 1], b2 = buffer[j + 2];
          chars.push(b0 >> 2);
          chars.push(((b0 & 0x03) << 4) | (b1 >> 4));
          chars.push(((b1 & 0x0F) << 2) | (b2 >> 6));
          chars.push(b2 & 0x3F);
        }
        return chars.map(i => METROID_ALPHABET[i]).join('');
      }

      import Alpine from 'https://esm.run/alpinejs';
      import tippy from 'https://esm.run/tippy.js';
      import 'https://esm.run/tippy.js/dist/tippy.css';
      document.addEventListener('alpine:init', () => {
        Alpine.data('app', () => ({
          password: [],
          toastCopy: false,
          startLocation: 'brinstar',
          options: {
            morphBall: false,
            bombs: false,
            highJump: false,
            variaSuit: false,
            screwAttack: false,
            longBeam: false,
            iceBeam: false,
            waveBeam: false,
            missiles: false,
            energyTanks: false,
            swimsuit: false,
          },
          bosses: {
            ridley: false,
            kraid: false,
            brain: false,
          },
          statues: {
            ridley: false,
            kraid: false,
          },
          zebetites: [false, false, false, false, false],

          updatePassword() {
            const buffer = new Uint8Array(18);
            const setStartBits = (b0, b1, b2) => {
              setBit(buffer, 64, b0);
              setBit(buffer, 65, b1);
              setBit(buffer, 66, b2);
            };

            switch (this.startLocation) {
              case "norfair":     setStartBits(1, 0, 0); break;
              case "kraidsLair":  setStartBits(0, 1, 0); break;
              case "ridleysLair": setStartBits(0, 0, 1); break;
              case "tourian":     setStartBits(1, 1, 0); break;
              default:            setStartBits(0, 0, 0); break;
            }

            if (this.options.morphBall) {
              setBit(buffer, 76, 1);
              setBit(buffer, 0, 0);
              setBit(buffer, 5, 1);
            }
            if (this.options.bombs) {
              setBit(buffer, 72, 1);
              setBit(buffer, 6, 1);
            }
            if (this.options.highJump) {
              setBit(buffer, 73, 1);
              setBit(buffer, 24, 1);
            }
            if (this.options.variaSuit) {
              setBit(buffer, 77, 1);
              setBit(buffer, 11, 1);
            }
            if (this.options.screwAttack) {
              setBit(buffer, 75, 1);
              setBit(buffer, 26, 1);
            }
            if (this.options.longBeam) setBit(buffer, 74, 1);
            if (this.options.iceBeam)  setBit(buffer, 79, 1);
            if (this.options.waveBeam) setBit(buffer, 78, 1);

            if (this.options.missiles) {
              buffer[10] = 255;
              const missileContainerBits = [
                1, 8, 13, 14, 16, 17, 18, 19, 20, 21, 22, 27, 28, 31,
                33, 34, 39, 40, 43, 46, 49
              ];
              missileContainerBits.forEach(bit => setBit(buffer, bit, 1));
            }

            if (this.options.energyTanks) {
              [4, 9, 12, 30, 36, 42, 45, 48].forEach(bit => setBit(buffer, bit, 1));
            }

            if (this.bosses.kraid) {
              setBit(buffer, 126, 1);
            }
            if (this.bosses.ridley) {
              setBit(buffer, 124, 1);
            }
            setBit(buffer, 58, this.bosses.brain);

            if (this.statues.kraid) {
              setBit(buffer, 127, 1);
            }
            if (this.statues.ridley) {
              setBit(buffer, 125, 1);
            }

            this.zebetites.forEach((active, index) => {
              setBit(buffer, 53 + index, active ? 1 : 0);
            });

            if (this.options.swimsuit) setBit(buffer, 71, 1);

            buffer[16] = 0;
            rotateRight(buffer);
            fixChecksum(buffer);

            const chars = bufferToPassword(buffer);
            this.password = chars.split('');
          },

          get maskedPassword() {
            const p = this.password.join('');
            return p.length === 24
              ? [p.slice(0, 6), p.slice(6, 12), p.slice(12, 18), p.slice(18, 24)]
              : ['', '', '', ''];
          },

          copyPassword() {
            const p = this.password.join('');
            if (p.length === 24) {
              navigator.clipboard.writeText(p).then(() => {
                this.toastCopy = true;
                setTimeout(() => this.toastCopy = false, 1500);
              });
            }
          },

        }));

        Alpine.magic('tooltip', el => message => {
        let instance = tippy(el, {
          content: message,
          trigger: 'manual',
        });

        // esc
        const onEscape = (e) => {
          if (e.key === 'Escape') cleanup();
        };

        const cleanup = () => {
          instance.hide();
          setTimeout(() => instance.destroy(), 150);
          document.removeEventListener('keydown', onEscape);
          el.removeEventListener('mouseleave', cleanup);
          el.removeEventListener('blur', cleanup);
        };

        document.addEventListener('keydown', onEscape);
        el.addEventListener('mouseleave', cleanup);
        el.addEventListener('blur', cleanup);

        instance.show();

        // fallback timeout
        setTimeout(cleanup, 2000);
      });

      Alpine.directive('tooltip', (el, { expression }, { evaluate }) => {
        const instance = tippy(el, {
          content: evaluate(expression),
        });

        const onEscape = (e) => {
          if (e.key === 'Escape') {
            instance.hide();
          }
        };

        document.addEventListener('keydown', onEscape);

        el._tippyCleanup = () => {
          document.removeEventListener('keydown', onEscape);
          instance.destroy();
        };
      });

      document.addEventListener('alpine:clean', (e) => {
        const el = e.target;
        if (el._tippyCleanup) {
          el._tippyCleanup();
          delete el._tippyCleanup;
        }
      });
      });
      window.Alpine = Alpine;
      // Alpine.plugin([blah]);
      Alpine.start();
    </script>

  </body>
</html>

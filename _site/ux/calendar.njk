---
layout: false
tags: ux
title: Calendar
desc: Every day of the calendar year in a nice grid format, printable on a single page.
tech:
  - title: HTML
    ico: fa6-brands:html5
  - title: CSS
    ico: fa6-brands:css3-alt
  - title: Twind
    ico: mdi:tailwind
ico: mdi:calendar-text
color: teal
date: 0012-01-01
---
{%- macro blank() -%}
  <li class="border-(b transparent)">&nbsp;</li>
{%- endmacro -%}
<!doctype html>
<html lang="en" class="bg-transparent antialiased" x-data="app">

  <head>
    <meta charset="utf-8" />
    <meta http-equiv="x-ua-compatible" content="ie=edge" />
    <title>{{ title }}</title>
    <meta name="viewport" content="width=device-width, initial-scale=1, interactive-widget=overlays-content" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Oswald:wght@200..700&display=swap" rel="preload" as="style" onload="this.onload=null;this.rel='stylesheet'" />
    <style>
      @media print {
        @page {
          margin: 0;
          padding: 1em;
          size: landscape;
        }
      }
    </style>
  </head>

  <body class="bg-white text-(gray-700 [10px]) !block" @keydown.left.window="setYear(year - 1)" @keydown.right.window="setYear(year + 1)" style="display: none;">
    <div id="app" class="p-4 min-h-screen flex-(& col)" x-cloak>
      <header class="pb-4 flex-(& none) items-center justify-center gap-4">
        <h1 class="text-xl font-black [font-variant-numeric:tabular-nums]" x-text="year"></h1>
        <button @click="setYear(year - 1)" class="btn-circle order-first" aria-label="Previous year"><iconify-icon icon="mdi:arrow-left" class="iconify"></iconify-icon></button>
        <button @click="setYear(year + 1)" class="btn-circle" aria-label="Next year"><iconify-icon icon="mdi:arrow-right" class="iconify"></iconify-icon></button>
        <button @click.prevent="setYear(new Date().getFullYear())" class="btn-circle fixed right-4" aria-label="Reset to this year"><iconify-icon icon="mdi:restore" class="iconify"></iconify-icon></button>
      </header>
      <main class="flex-(& 1)">
        <section class="w-full [font-variant-numeric:tabular-nums] grid-(& cols-12) gap-2">
          <template x-for="(days, month) in grid" hidden>
            <ul class="h-full flex-(& col) relative [&:not(:last-child)]:(after:(w-px h-full bg-gray-700/50 absolute -right-1 inset-y-0 content-['']))">
              <li class="h-full flex-(& col)">
                <h2 class="border-(b gray-700/50) text-center uppercase font-black flex-none" x-text="month"></h2>
                <ul class="flex-1 grid-(& flow-row)">
                  <template x-for="(day, index) in days" hidden>
                    <li
                      class="px-2 border-(b gray-700/50) flex items-center relative"
                      :class="{ 'bg-gray-500/20': day.weekday && ['Sat', 'Sun'].includes(day.weekday) }"
                    >
                      <template x-if="day.day" hidden><strong class="w-4 font-semibold flex-none" x-text="day.day"></strong></template>
                      <template x-if="day.weekday" hidden><small class="flex-1" x-text="day.weekday.substring(0, 1)"></small></template>
                      <template x-if="!day.day" hidden><span class="opacity-50">&#10005;</span></template>
                    </li>
                  </template>
                </ul>
              </li>
            </ul>
          </template>
        </section>
      </main>
    </div>
    <script type="module">
      // icons
      import 'https://esm.run/iconify-icon';

      // twind
      import { install, injectGlobal } from 'https://esm.run/@twind/core';
      import presetAutoprefix from 'https://esm.run/@twind/preset-autoprefix';
      import presetTailwind from 'https://esm.run/@twind/preset-tailwind';
      install({
        presets: [presetAutoprefix(), presetTailwind()],
        darkMode: 'class',
        hash: false,
        theme: {
          extend: {
            colors: ({ theme }) => ({
              brand: theme('colors.indigo'),
            }),
            fontFamily: ({ theme }) => ({
              sans: ['Oswald', ...theme('fontFamily.sans')],
            }),
          },
        },
        rules: [
          ['text-wrap-(unset|wrap|nowrap|balance)', 'textWrap'],
        ],
      });
      // global css
      injectGlobal`
        @layer base {
          [x-cloak] { @apply hidden; }
          hr { @apply border-gray-500/25; }
          .btn-circle { @apply border-(2 transparent) w-8 h-8 text-(gray-500 xl) flex items-center justify-center rounded-full transition hover:(border-current text-current) focus-visible:(text-current outline-(& 2 current offset-1)) print:hidden; }
        }
      `

      // alpine
      import Alpine from 'https://esm.run/alpinejs';
      document.addEventListener('alpine:init', () => {
        Alpine.data('app', () => ({
          grid: {},
          year: null,
          init() {
            const hashYear = parseInt(window.location.hash.replace('#', ''));
            const currentYear = new Date().getFullYear();
            const year = !isNaN(hashYear) ? hashYear : currentYear;
            this.setYear(year);
            window.addEventListener('hashchange', () => {
              const newHash = parseInt(window.location.hash.replace('#', ''));
              if (!isNaN(newHash)) this.setYear(newHash);
            });
          },
          setYear(year) {
            this.year = year;
            window.location.hash = year;
            this.grid = {};
            const startDate = new Date(year, 0, 1);
            const endDate = new Date(year, 11, 31);
            let current = new Date(startDate);

            while (current <= endDate) {
              const month = current.toLocaleString('default', { month: 'short' });
              if (!this.grid[month]) this.grid[month] = [];
              const numericDay = current.getDate();
              const shortWeekdayName = current.toLocaleDateString('en-US', { weekday: 'short' });
              this.grid[month].push({
                date: new Date(current),
                day: numericDay,
                weekday: shortWeekdayName,
              });
              current.setDate(current.getDate() + 1);
            }

            // pad each month to 31 days
            for (const days of Object.values(this.grid)) {
              const padCount = 31 - days.length;
              if (padCount > 0) {
                days.push(...Array(padCount).fill({}));
              }
            }
          }
        }));
      });
      window.Alpine = Alpine;
      Alpine.start();
    </script>
  </body>

</html>
